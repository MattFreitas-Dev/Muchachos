//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""KightMoves"",
            ""id"": ""c9672b9d-de4d-4ebb-bca1-bfc3afaaf93c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7f35534d-e724-4eb6-998b-d683c15def70"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Combat"",
                    ""type"": ""Value"",
                    ""id"": ""fcb569d8-51de-47a3-9c14-c6fee335a2f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""feaa141e-ff13-494c-be47-b5198c38f7ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KB"",
                    ""id"": ""0851865f-7a46-42ab-8004-3ac6f51f69b9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""773048c9-2a26-4c06-a06d-aaef5ef219a1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3ebd64e5-297f-42d5-a8d4-0358818e557a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""adb7dbfb-ffbb-43ce-b947-4a46cac76243"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4803ad50-08f9-41dd-8dd5-0cb89c186fba"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ee470b00-6092-46cd-92b9-b85467d9aea6"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03f9a345-42c3-40d6-9851-efc3a72f9397"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0347bade-9c82-4412-aa59-164804baa444"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ef0d774-7cc6-4eb4-9555-86719721475a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KightMoves
        m_KightMoves = asset.FindActionMap("KightMoves", throwIfNotFound: true);
        m_KightMoves_Movement = m_KightMoves.FindAction("Movement", throwIfNotFound: true);
        m_KightMoves_Combat = m_KightMoves.FindAction("Combat", throwIfNotFound: true);
        m_KightMoves_Menu = m_KightMoves.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KightMoves
    private readonly InputActionMap m_KightMoves;
    private List<IKightMovesActions> m_KightMovesActionsCallbackInterfaces = new List<IKightMovesActions>();
    private readonly InputAction m_KightMoves_Movement;
    private readonly InputAction m_KightMoves_Combat;
    private readonly InputAction m_KightMoves_Menu;
    public struct KightMovesActions
    {
        private @InputMap m_Wrapper;
        public KightMovesActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_KightMoves_Movement;
        public InputAction @Combat => m_Wrapper.m_KightMoves_Combat;
        public InputAction @Menu => m_Wrapper.m_KightMoves_Menu;
        public InputActionMap Get() { return m_Wrapper.m_KightMoves; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KightMovesActions set) { return set.Get(); }
        public void AddCallbacks(IKightMovesActions instance)
        {
            if (instance == null || m_Wrapper.m_KightMovesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KightMovesActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Combat.started += instance.OnCombat;
            @Combat.performed += instance.OnCombat;
            @Combat.canceled += instance.OnCombat;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IKightMovesActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Combat.started -= instance.OnCombat;
            @Combat.performed -= instance.OnCombat;
            @Combat.canceled -= instance.OnCombat;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IKightMovesActions instance)
        {
            if (m_Wrapper.m_KightMovesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKightMovesActions instance)
        {
            foreach (var item in m_Wrapper.m_KightMovesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KightMovesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KightMovesActions @KightMoves => new KightMovesActions(this);
    public interface IKightMovesActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCombat(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
